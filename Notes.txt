Section 1:
console.log('Hello World!');

Section 2:
* Numbers, String, Boolean, Undefined, Null
* Function Statements/Declarations and Function Expression
* Object :
   Eg:) var a1={
        name:'Sanath',
        yearOfBirth=1998,
        calculateAge: function(){
        this.age = 2018 - this.yearOfBirth;
        }
        };
   Eg:) var a1=new Object();
* Array :
  - Functions/methods : indexOf(), pop(), push(), unshift(), shift()
  - Properties : length
  Eg:) var l=[10,20,30];
  Eg:) val Sanath=['Sanath', 20, male, single];
  Eg:) var l3=new Array(1,2,3,4,5);
* Loops : for, while,... same as C
* Switch : case, break, default,... same as C
* Conditional Statements : if, else if,... same as C
* break, continue,...

Section 3:
* JavaScript Engine
    Eg:) Parser -> Convert to Machine Code -> Code Runs
* Execution Context (EC)
* Execution Stack : Global Execution Context, Other
function EC's,...
* Global Execution Context:
    Eg:) var l1===window.l1;
* Execution Context Object (ECO) contains:
 - Variable Object (VO)
 - Scope Chain
 - "This" variable
* Property for function Declarations created in VO of ECO,
  before any code is executed.
* Property for variables in VO of EC obj., before any code
  is executed, is assigned an Undefined value.
* Note:
    - Function declarations load before any code is
    executed.
    - Function expressions load only when the interpreter
    reaches that line of code.
* Each new function creates a scope.
* Lexical Scoping : a function that is lexically within
  another function gets access to the scope of the outer
  function.
* "This" keyword : points to the object calling the method.
* By default, for regular function calls, the "this"
  keyword points at the global obj. (i.e., window obj.).
* The this keyword is not assigned a value until a function
  where it is defined is actually called.
  Eg:) console.log(this);
* Method Borrowing.

Section 4:
*

Links :
https://jsbin.com/?js,console,output
https://www.diffchecker.com/
https://discordapp.com/channels/146186188783484928/146186188783484928
http://codingheroes.io/resources/

